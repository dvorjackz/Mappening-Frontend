{{> header}}


<div class="container home-container">
    <div class="row home-row">
    <div id="events-mount" class="col-sm-4 col-md-4"></div>
    <div class="map-display col-sm-8 col-md-8" id="map">
      <div class='map-overlay top'>
          <div class='map-overlay-inner'>
              <input id='slider' type='range' min='0' max='48' step='1' value='24' list='tickmarks'/>
          </div>
      </div>
    </div>
    </div>
</div>







<!--<div id='map'></div>-->

<script>
mapboxgl.accessToken = 'pk.eyJ1IjoiaGVsYXJhYmF3eSIsImEiOiJjajUxN3k2d3MwMGg4MnFxZHhjcjYxN2U4In0.0OSl71QURA_P9d32r982Zw';

/*var bounds = [[-118.6, 33.9]], // Southwest coordinates
			       [-118.4, 34.1]];  // Northeast coordinates*/

var map = new mapboxgl.Map({
	container: 'map',
	style: 'mapbox://styles/helarabawy/cj9tlpsgj339a2sojau0uv1f4',
	center: [-118.445320, 34.066915],
	//maxBounds: [[-118.48, 34.05],[-118.4, 34.1]],
	zoom: 15,
	pitch: 60

});

/////////////////////////////////////////////////
/////////////////////////////////////////////////

var url = 'http://52.53.197.64/api/v1/events';
map.on('load', function () {
    window.setInterval(function() {
        map.getSource('drone').setData(url);
    }, 2000);

    map.addSource('drone', { type: 'geojson', data: url });
    map.addLayer({
        "id": "drone",
        "type": "symbol",
        "source": "drone",
        "layout": {
            "icon-image": "rocket-15"
        }
    });
});

/////////////////////////////////////////////////
/////////////////////////////////////////////////

map.addControl(new mapboxgl.GeolocateControl({
    positionOptions: {
        enableHighAccuracy: true
    },
    fitBoundsOptions: {maxZoom: 17.7, speed: .3},
    trackUserLocation: true
}));

map.addControl(new mapboxgl.NavigationControl());
map.addControl(new mapboxgl.FullscreenControl());


// 3D Display Function
function threeDDisplay() {

   // Insert the layer beneath any symbol layer.
    var layers = map.getStyle().layers.reverse();
    var labelLayerIdx = layers.findIndex(function (layer) {
        return layer.type !== 'symbol';
    });
    map.addLayer({
        'id': '3d-buildings',
        'source': 'composite',
        'source-layer': 'building',
        'filter': ['==', 'extrude', 'true'],
        'type': 'fill-extrusion',
        'minzoom': 15,
        'paint': {
            'fill-extrusion-color': '#aaa',
            'fill-extrusion-height': {
                'type': 'identity',
                'property': 'height'
            },
            'fill-extrusion-base': {
                'type': 'identity',
                'property': 'min_height'
            },
            'fill-extrusion-opacity': 0
        }
    }, "eventstest");
}

/*function displayPoints() {
  map.addLayer({
    "id": "eventstest2",
    "type": "circle",
    "source": "composite",
    "source-layer": "eventstest2",
    "layout": {
        "visibility": "visible"
    },
    "paint": {}
  });
}*/

// Hover popup 2
function hoverPopup2() {
  // Create a popup, but don't add it to the map yet.
  var popup = new mapboxgl.Popup({
      closeButton: false,
      closeOnClick: false
  });

  map.on('mouseenter', 'drone', function(e) {
      // Change the cursor style as a UI indicator.
      map.getCanvas().style.cursor = 'pointer';

      // Populate the popup and set its coordinates
      // based on the feature found.
      popup.setLngLat(e.features[0].geometry.coordinates)
          .setHTML(e.features[0].properties.event_name)
          .addTo(map);

  });

  map.on('mouseleave', 'drone', function() {
      map.getCanvas().style.cursor = '';
      popup.remove();
  });

  map.on('click', 'drone', function (e) {
    map.flyTo({center: e.lngLat, zoom: 17, speed: .3});
});
}

function startMap() {
	threeDDisplay();
	map.flyTo({center: [-118.445320, 34.066915], zoom: 15.8, speed: .15});
	setTimeout(function() {map.setPaintProperty('3d-buildings', 'fill-extrusion-opacity', .6);}, 2100);
  //map.setLayoutProperty('eventstest', 'visibility', 'visible');
}


map.on('load', startMap);
map.on('load', hoverPopup2);

// Navigating map with game-like controls

	// pixels the map pans when the up or down arrow is clicked
    var deltaDistance = 100;

    // degrees the map rotates when the left or right arrow is clicked
    var deltaDegrees = 25;
    var deltaZoom = .5;
    function easing(t) {
        return t * (2 - t);
    }

    map.on('load', function() {
        map.getCanvas().focus();

        map.getCanvas().addEventListener('keydown', function(e) {
            e.preventDefault();
            if (e.which === 38) { // up
                map.panBy([0, -deltaDistance], {
                    easing: easing
                });
            } else if (e.which === 40) { // down
                map.panBy([0, deltaDistance], {
                    easing: easing
                });
            } else if (e.which === 37) { // left
                map.easeTo({
                    bearing: map.getBearing() - deltaDegrees,
                    easing: easing
                });
            } else if (e.which === 39) { // right
                map.easeTo({
                    bearing: map.getBearing() + deltaDegrees,
                    easing: easing
                });
            } else if (e.which === 32) { // zoom in (space)
                map.easeTo({
                    zoom: map.getZoom() + deltaZoom,
                    easing: easing
                });
            } else if (e.which === 8) { // zoom out (backspace)
                map.easeTo({
                    zoom: map.getZoom() - deltaZoom,
                    easing: easing
                });
           }
        }, true);
    });

    // sidebar click
    function goToLocation(x,y) {
      map.flyTo({center: [x, y], zoom: 20, speed: 1}); // test coordinates till fix

    }

</script>


<script id="some-template" type="text/x-handlebars-template">
    <div class="dropdown sidebar-header">
      <p data-toggle="dropdown">
          all categories
      <span class="caret"></span></p>
      <ul class="dropdown-menu">
        <li><a href="#">music</a></li>
        <li><a href="#">networking</a></li>
        <li><a href="#">fitness</a></li>
        <li><a href="#">cause</a></li>
        <li><a href="#">health</a></li>
      </ul>
  </div>


    <div class="sidebar">
        \{{#each events}}
        <div class="sidebar-event" onclick=goToLocation(\{{{this.geometry.coordinates}}},{{{this.geometry.coordinates}}})>
            <img src="\{{this.properties.cover_picture}}" class="sidebar-event-img"></img>
            <div class="sidebar-event-details">
                <p class="sidebar-event-name">\{{this.properties.event_name}}</p>
                <p class="sidebar-event-date">\{{this.properties.start_time}}</p>
                <p class="sidebar-event-location">\{{this.properties.venue.location.street}}</p>
                <p class="sidebar-event-category">\{{this.properties.category}}</p>
            </div>

        </div>
        <div class="seperator"></div>
        \{{/each}}
    </div>
</script>




{{> footer}}
