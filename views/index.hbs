{{> header}}

<div class="container home-container">
    <!-- Sidebar Search Results -->
    <div id="search-results"></div>
    <div class="row home-row">
    <div id="events-mount" class="col-sm-4 col-md-4"></div>
    <div class="map-display col-sm-8 col-md-8" id="map">
      <div class='map-overlay top'>
          <div class='map-overlay-inner'>
            <p id="leftArrow" display="-webkit-inline-box" onclick="previousDay()"></p>
            <p id="relativeDay"><br></p>
            <p id="currDate"></p>
            <p id="rightArrow"style="display:inline" onclick="nextDay()"></p>
              <!--input id='slider' type='range' min='0' max='48' step='1' value='24' list='tickmarks'/-->
          </div>
      </div>
    </div>
    </div>
</div>

<script id="search-results-template" type="text/x-handlebars-template">
    <div>
        \{{#each searchEvents}}
        <div>\{{this.properties.event_name}}</div>
        \{{/each}}
    </div>
</script>

<script>
////////////////////////////////////////////////
///////////////////// MAP //////////////////////
////////////////////////////////////////////////
// https://api.mapbox.com/styles/v1/helarabawy/cj9tlpsgj339a2sojau0uv1f4?access_token=pk.eyJ1IjoiaGVsYXJhYmF3eSIsImEiOiJjajUxN3k2d3MwMGg4MnFxZHhjcjYxN2U4In0.0OSl71QURA_P9d32r982Zw

mapboxgl.accessToken = 'pk.eyJ1IjoiaGVsYXJhYmF3eSIsImEiOiJjajUxN3k2d3MwMGg4MnFxZHhjcjYxN2U4In0.0OSl71QURA_P9d32r982Zw';

var map = new mapboxgl.Map({
	container: 'map',
	style: 'mapbox://styles/helarabawy/cj9tlpsgj339a2sojau0uv1f4',
	center: [-118.445320, 34.066915],
  // maxBounds: [[-118.46, 34.056],[-118.428, 34.079]],
	zoom: 15,
	pitch: 60
});

////////////////////////////////////////////////
/////////////////// LOAD DATA //////////////////
////////////////////////////////////////////////

var events = 'http://52.53.72.98/api/v1/events'; // json we are pulling from for event info
map.on('load', function () {
    map.addSource('events', { type: 'geojson', data: events });
    // Making layers (based on categorization)
  /*  events.features.forEach(function(feature) {
            var symbol = features.properties.category; // category name -> icon
            var layerID = 'poi-' + symbol;
            // Add a layer for this symbol type if it hasn't been added already.
            if (!map.getLayer(layerID)) {
                map.addLayer({
                    "id": layerID,
                    "type": "symbol",
                    "source": "events",
                    "layout": {
                        "icon-image": "/icons/" + symbol + ".svg",
                        "icon-allow-overlap": true
                    },
                    "filter": ["==", "icon", symbol]
                });
            }
        });*/
  /* REVERT TO THIS IF categorization does not work*/

  /**** map.addLayer({
        "id": "eventlayer",
        "type": "symbol",
        "source": "events",
        "layout": {
            "icon-image": "triangle-15",
            "icon-size": 2.3,
            "icon-allow-overlap": true
        }
    }); */

    map.loadImage('https://cdn0.iconfinder.com/data/icons/small-n-flat/24/678111-map-marker-512.png', function(error, image) {
        if (error) throw error;
        map.addImage('pin', image);
        map.addLayer({
            "id": "eventlayer",
            "type": "symbol",
            "source":"events",
            "layout": {
                "icon-image": "pin",
                "icon-size":.06,
                "icon-allow-overlap": true

            }
        });
    });
});


////////////////////////////////////////////////
///////////////// MAP CONTROLS /////////////////
////////////////////////////////////////////////

map.addControl(new mapboxgl.GeolocateControl({
    positionOptions: {
        enableHighAccuracy: true
    },
    fitBoundsOptions: {maxZoom: 17.7, speed: .3},
    trackUserLocation: true
}));
map.addControl(new mapboxgl.NavigationControl());
map.addControl(new mapboxgl.FullscreenControl());

////////////////////////////////////////////////
///////////// 3D DISPLAY BUILDINGS /////////////
////////////////////////////////////////////////

function threeDDisplay() {
   // Insert the layer beneath any symbol layer.
    var layers = map.getStyle().layers.reverse();
    var labelLayerIdx = layers.findIndex(function (layer) {
        return layer.type !== 'symbol';
    });
    map.addLayer({
        'id': '3d-buildings',
        // 'source': 'composite',
        // 'source-layer': 'building',
        'source': {
            'type': 'geojson',
            'data': {
                "geometry": {
                  "coordinates": [
                      [[ -118.45551865814207, 34.07581326679353 ],
                      [ -118.45500722516076, 34.07033607099616 ],
                      [ -118.45368432920594, 34.070360672465966 ],
                      [ -118.4530098201869, 34.070653172276934 ],
                      [ -118.45253816379561, 34.07063128835591 ],
                      [ -118.45144984403191, 34.07015510095074 ],
                      [ -118.45076675844936, 34.06954006015289 ],
                      [ -118.44907389418556, 34.068728199459 ],
                      [ -118.44830171048588, 34.067448888037845 ],
                      [ -118.4474963025767, 34.06659906269083 ],
                      [ -118.44752097646244, 34.06612367656311 ],
                      [ -118.44788591926238, 34.065111634604094 ],
                      [ -118.44803441613065, 34.064767191798026 ],
                      [ -118.44822268083851, 34.06366046396009 ],
                      [ -118.44242927891156, 34.06371425322689 ],
                      [ -118.44144494192352, 34.064053481863695 ],
                      [ -118.44107570645531, 34.064078301998265 ],
                      [ -118.44069867098369, 34.06506242857466 ],
                      [ -118.44019378164306, 34.06538226724257 ],
                      [ -118.43977799041957, 34.06629257071299 ],
                      [ -118.43921923387019, 34.067222046170784 ],
                      [ -118.4391865157054, 34.06802454007638 ],
                      [ -118.43909490483702, 34.0688758110752 ],
                      [ -118.43890789649214, 34.06978211645715 ],
                      [ -118.4385900154964, 34.07072093454039 ],
                      [ -118.43780273781988, 34.071290724806815 ],
                      [ -118.43734264182974, 34.07182798932827 ],
                      [ -118.43724452945703, 34.07266580977283 ],
                      [ -118.43796947329658, 34.07420448015537 ],
                      [ -118.43870881299101, 34.07586246657917 ],
                      [ -118.43866506686874, 34.07640949929218 ],
                      [ -118.4387682117345, 34.076674258890705 ],
                      [ -118.43892210250041, 34.07686915454899 ],
                      [ -118.43901723683489, 34.07713705027703 ],
                      [ -118.43906572571285, 34.077799609637395 ],
                      [ -118.43917136406742, 34.077996398814804 ],
                      [ -118.43941801778521, 34.07826132044468 ],
                      [ -118.44040167725481, 34.077633639790704 ],
                      [ -118.44123325969795, 34.07746144401683 ],
                      [ -118.44254003211194, 34.07746144401683 ],
                      [ -118.44354981079701, 34.07709245190664 ],
                      [ -118.44435169387035, 34.076674258890705 ],
                      [ -118.44458928885574, 34.076059265423225 ],
                      [ -118.44497538070559, 34.074042055516216 ],
                      [ -118.44553966879351, 34.07362384743986 ],
                      [ -118.44643064998398, 34.07362384743986 ],
                      [ -118.44708403619288, 34.07362384743986 ],
                      [ -118.44833140985953, 34.073476244109074 ],
                      [ -118.44910359355922, 34.07374685002959 ],
                      [ -118.44937967902185, 34.074057327837735 ],
                      [ -118.44966412780691, 34.07454791717427 ],
                      [ -118.4499276683178, 34.075020339297254 ],
                      [ -118.45029156848238, 34.0754442674904 ],
                      [ -118.45066135838962, 34.07569516912582 ],
                      [ -118.45109345155572, 34.07591166633621 ],
                      [ -118.45204356798415, 34.07634932881231 ],
                      [ -118.45307452645798, 34.0768586469342 ],
                      [ -118.4537661316216, 34.07703811883938 ],
                      [ -118.45427128447156, 34.07684645626499 ],
                      [ -118.45551865814207, 34.07581326679353 ]]
                  ],
                  "type": "Polygon"
                },
                "type": "Feature",
                "properties": {}
              }
        },
        'layout': {},
        'type': 'fill',
        'paint': {
            'fill-color': '#088',
            'fill-opacity': 0.8
        }
        // 'source-layer': 'building',
        // 'filter': ['==', 'extrude', 'true'],
        // 'type': 'fill-extrusion',
        // 'minzoom': 15,
        // 'paint': {
        //     'fill-extrusion-color': '#aaa',
        //     'fill-extrusion-height': {
        //         'type': 'identity',
        //         'property': 'height'
        //     },
        //     'fill-extrusion-base': {
        //         'type': 'identity',
        //         'property': 'min_height'
        //     },
        //     'fill-extrusion-opacity': 0
        // }
    }, "eventstest");
}

////////////////////////////////////////////////
///////////// HOVER POPUP WHEN HOVER ///////////
////////////////////////////////////////////////

function hoverPopup() {
  // Create a popup, but don't add it to the map yet.
    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false,
        offset: {'bottom':[15,0]}
    });

    map.on('mouseenter', 'eventlayer', function(e) {
         // Change the cursor style as a UI indicator.
         map.getCanvas().style.cursor = 'pointer';
         // Populate the popup and set its coordinates
         // based on the feature found.
         popup.setLngLat(e.features[0].geometry.coordinates)
             .setHTML('<p id=popupEvent></p> <p id=popupDate></p>')
             .addTo(map);

        document.getElementById('popupEvent').innerHTML =  e.features[0].properties.event_name ;
        document.getElementById('popupDate').innerHTML = formatDate(new Date(e.features[0].properties.start_time));
     });
     map.on('mouseleave', 'eventlayer', function() {
         map.getCanvas().style.cursor = '';
         popup.remove();
     });
     map.on('click', 'eventlayer', function (e) {
       map.flyTo({center: e.lngLat, zoom: 17, speed: .3});
    //   showModal('sign-up', e.properties);
       showModal('sign-up', e.features[0].properties);
   });
}

////////////////////////////////////////////////
/////////////// START UP THE MAP ///////////////
////////////////////////////////////////////////
// TODAY //
var today = new Date();
var todayD = today.getDate();
var todayM = today.getMonth(); //January is 0!

var d = todayD;
var m = todayM;

var currDay = today;

function nextDay() {
  currDay.setDate(currDay.getDate() + 1);
  d = currDay.getDate();
  m = currDay.getMonth();
  updateDate();
}

function previousDay() {
  currDay.setDate(currDay.getDate() - 1);
  d = currDay.getDate();
  m = currDay.getMonth();
  updateDate();
}

function updateDate() {
  console.log("Today: " +todayD + "Curr: " +d)
  console.log("Check: " +  d == todayD && m == todayM)
    if (d == todayD && m == todayM) {
      document.getElementById("leftArrow").style.display = "none";
      document.getElementById("relativeDay").innerHTML =  "today";
    } else {
      if (d == (todayD + 1)) {
        document.getElementById("relativeDay").innerHTML =  "tomorrow";
      } else if (d == (todayD + 7)) {
        document.getElementById("relativeDay").innerHTML = "in a week";
        document.getElementById("rightArrow").style.display = "none";
      } else {
        document.getElementById("relativeDay").innerHTML = (d - todayD) +" days from today";
      }
      document.getElementById("leftArrow").style.display = "inline";
    }

    document.getElementById("currDate").innerHTML =  (getMonthNameFromMonthNumber(m) + " " + d).toLowerCase();
}

function startMap() {
	threeDDisplay();
	map.flyTo({center: [-118.445320, 34.066915], zoom: 15.8, speed: .15});
	setTimeout(function() {map.setPaintProperty('3d-buildings', 'fill-extrusion-opacity', .6);}, 2100);

  document.getElementById("leftArrow").innerHTML = "&#9664;";
  document.getElementById("rightArrow").innerHTML = "&#9658;";
  updateDate();


}
map.on('load', startMap);
map.on('load', hoverPopup);

////////////////////////////////////////////////
////// NAVIGATING MAP W GAME-LIKE CONTROLS /////
////////////////////////////////////////////////

	  // pixels the map pans when the up or down arrow is clicked
    var deltaDistance = 100;

    // degrees the map rotates when the left or right arrow is clicked
    var deltaDegrees = 25;

    var deltaZoom = .5;

    function easing(t) {
        return t * (2 - t);
    }
    map.on('load', function() {
        map.getCanvas().focus();
        map.getCanvas().addEventListener('keydown', function(e) {
            e.preventDefault();
            if (e.which === 38) { // up
                map.panBy([0, -deltaDistance], {
                    easing: easing
                });
            } else if (e.which === 40) { // down
                map.panBy([0, deltaDistance], {
                    easing: easing
                });
            } else if (e.which === 37) { // left
                map.easeTo({
                    bearing: map.getBearing() - deltaDegrees,
                    easing: easing
                });
            } else if (e.which === 39) { // right
                map.easeTo({
                    bearing: map.getBearing() + deltaDegrees,
                    easing: easing
                });
            } else if (e.which === 32) { // zoom in (space)
                map.easeTo({
                    zoom: map.getZoom() + deltaZoom,
                    easing: easing
                });
            } else if (e.which === 8) { // zoom out (backspace)
                map.easeTo({
                    zoom: map.getZoom() - deltaZoom,
                    easing: easing
                });
           }
        }, true);
    });

////////////////////////////////////////////////
//////// SIDEBAR EVENT ONCLICK FUNCTION ////////
////////////////////////////////////////////////

function zoomToEventLocation(x, y) {
  map.flyTo({center: [x, y], zoom: 17, speed: .85});
}


</script>

<!--  Sidebar Events-->
<script id="sidebar-event-template" type="text/x-handlebars-template">
    <!--  Sidebar Static Categories-->
    <div class="dropdown sidebar-header">
      <p data-toggle="dropdown">
          all categories
      <span class="caret"></span></p>
      <ul class="dropdown-menu">
        <li><a href="#">music</a></li>
        <li><a href="#">networking</a></li>
        <li><a href="#">fitness</a></li>
        <li><a href="#">cause</a></li>
        <li><a href="#">health</a></li>
      </ul>
  </div>

  <div class="sidebar">
      <!-- `events` is passed from main.js's API Call -->
      <!-- We iterate through each of these objects and append them using the template -->
      \{{#each events}}
      <a class="sign-up sign-up-trigger-modal sidebar-event" onclick="zoomToEventLocation(\{{{this.geometry.coordinates}}},{{{this.geometry.coordinates}}})">
          <img src="\{{this.properties.cover_picture}}" class="sidebar-event-img"></img>
          <div class="sidebar-event-details">
              <p class="sidebar-event-name">\{{this.properties.event_name}}</p>
              <p class="sidebar-event-date">\{{this.properties.start_time}}</p>
              <p class="sidebar-event-location">\{{this.properties.venue.location.street}}</p>
              <p class="sidebar-event-category">\{{this.properties.category}}</p>
          </div>
      </a>
      <div class="seperator"></div>
      \{{/each}}
  </div>
</script>


{{> footer}}
